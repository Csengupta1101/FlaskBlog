Hello everyone and welcome to this video.In this session , we will accomplish two major tasks. First we will assign bootstrap
elements in our blog_detail.html file. And then we will assign update and delete buttons in the blog_detail html navbar as well.

So without any further dealy , let's begin.

Let's add the customised bootstrap first in blog_detail.html file -

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
 <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">
    <title>BlogDetail</title>
</head>

This will import the bootstrap styling on this page. Let's do the same on footer section as well -

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"
 integrity="sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p" crossorigin="anonymous"></script>

 As discussed we will create a navbar here in this page that will incorporate update and delete function for the blogs
 stated. let's do that -

            <li class="nav-item">
                <a class="nav-link btn btn-success mx-3" href="/update/{{blog.blog_id}}">Edit</a>
              </li>
              <li class="nav-item">
                <a class="nav-link btn btn-danger" href="/delete/{{blog.blog_id}}">Delete</a>
              </li>
            </ul>

With the existing set up , we  will be adding edit and delete option here ,as you can see on the screen.And once any of
those operation is executed , our href is set to the respective links as well for redirection. Let's first talk about
the delete function.

For the delete function to work , we need to set up a 'delete' route on our python file. and once a post is deleted 
we need to make sure that redirection takes place in the home page itself.

@app.route("/delete/<int:id>" , methods = ['GET','POST'])
def blogdelete(id):
    blog = Blog.query.get(id)
    db.session.delete(blog)
    db.session.commit()
    flash('post has been deleted','success')
    return redirect('/')

Now once our deletion is completed and redirection as well , let's focus on the update section. Now before coding it up
its crucial to understand that what is our goal from the update function. We want the update function to open up a new 
form element just like blog. That element will contain the pre existing elements of that blog itself.

Now we will provide with new user inputs there. Once that is in place , we will click on our update button and the blog 
content will be replaced by the newly submitted content. And we will again get redirected towards the home page.

The code snippet in the app.py file is as seen on the screen -

@app.route("/update/<int:id>" , methods = ['GET','POST'])
def blogupdate(id):
    blog = Blog.query.get(id)
    if request.method == 'POST':
        blog.title = request.form.get('title')
        blog.author = request.form.get('author')
        blog.content = request.form.get('content')
        db.session.commit()
        flash('post has been updated','success')
        return redirect('/')

    return render_template('blogupdate.html',blog=blog)

Now let's save the file and run. Awesome , if we check now in the server, the site is operating smoothly. The CRUD functions
create ,read , update and delete , all of these functions are working properly.

Let's just do one more change to make the site look a bit better. Let's download an image , and using static folder function
let's push it into our homepage -

<img src = "{{ url_for('static', filename='abc.jpg') }}" alt = "" style = "width:100%;height:600px;">

Now if we check the site , the image is up and fixed.

This would be the end of this video and this project as well.We will again meet on our next lesson for project revision
and then weill wrap up the session.

Till then keep learning.